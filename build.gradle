plugins {
    id 'java'
}

group = 'me.eyetealer.mckingofthehill'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

configurations {
    pluginImplementation

    implementation.extendsFrom pluginImplementation
}

dependencies {
    // Paper
    compileOnly "io.papermc.paper:paper-api:${project.papermcVersion}"

    // Database connectors
    pluginImplementation 'com.mysql:mysql-connector-j:8.0.32'
    pluginImplementation 'org.mariadb.jdbc:mariadb-java-client:3.1.2'
    pluginImplementation 'org.postgresql:postgresql:42.5.4'

    // Testing frameworks
    testImplementation "org.junit.jupiter:junit-jupiter:${project.junitJupiterVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${project.mockitoJunitJupiterVersion}"
    testImplementation "org.assertj:assertj-core:${project.assertjVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${project.lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${project.lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${project.lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${project.lombokVersion}"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

test {
    useJUnitPlatform()
}

jar {
    from {
        configurations.pluginImplementation.collect {
            println it
            it.isDirectory() ? it : zipTree(it)
        }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}